# All steps on server, for eventual portability:

# 1. Install PostgreSQL
sudo apt install postgresql

# 2. Verify it's running
sudo -u postgres
systemctl status postgresql

# 3. Create a new password and save it in your password manager

# 4. Create a user for remotely accessing the database
sudo -u postgres createuser -P testuser

# 5. Verify new user can access database
psql -h localhost -p 5432 -U testuser -d postgres

# Moving on from db, now we want to set up the domain.
# 6. First, install ddclient
sudo apt install ddclient

# Configuration on install doesn't really matter, it will just write .conf files which we will override subsequently
# 7. Write ddclient conf files
sudo vim /etc/ddclient.conf
# /etc/ddclient.conf
syslog=yes
mail=root
mail-failure=root
ssl=yes
protocol=namecheap
use=web, web=ipify-ipv4
login=jackbonaguro.com
password=<Copy from namecheap>
countdowns.jackbonaguro.com

# /etc/default/ddclient
run_dhclient="false"
run_ipup="false"
run_daemon="true"
daemon_interval="300"

# 8. Verify it works
sudo ddclient

# 9. Restart service and view status
sudo service ddclient restart
sudo service ddclient status

# 10. Now that domain is reachable, configure db to accept remote connections
sudo vim /etc/postgresql/15/main/postgresql.conf
# /etc/postgresql/15/main/postgresql.conf
...
listen_addresses = '*'
...

sudo vim /etc/postgresql/15/main/pg_hba.conf
# /etc/postgresql/15/main/pg_hba.conf
...
host  all   all   0.0.0.0/0   scram-sha-256
...

sudo service postgresql restart

# Now you should be able to connect with Postico!
# On to running the server on this instance.
# 11. Install git
sudo apt install git

# 12. Clone the server
git clone https://github.com/jackbonaguro/countdowns-server.git
cd countdowns-server

# 13. Install nvm
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# 14. Install npm and node 20
nvm install 20
nvm use 20

# 15. Install node deps
npm i

# 14. Set up the env file
# 15. Copy firebase sdk file

# 16. Start the server
npm start

# 17. Now that server runs, we want persistence. Install pm2
npm install pm2 -g

# 18. In another session, trigger a test notification
curl http://localhost:3000/testNotification

# Now let's turn the server into a service, so it doesn't go down with every error.
# 19. Install n, which will manage node version for system use (NVM isn't intended for systemd):
# https://forum.ghost.org/t/updating-systemd-node-version/41729/6
sudo npm i -g n
sudo n 20

# 20. Copy countdowns-server.service to /etc/systemd/system/

# 21. Start the service
sudo systemctl daemon-reload
sudo systemctl enable countdowns-server.service
sudo systemctl start countdowns-server.service
sudo systemctl status countdowns-server.service
journalctl -u countdowns-server.service

# Now we want to make the api accessible from the outside world.
# This means we'll want to use nginx as a http proxy

# 22. Install nginx
sudo apt install nginx

# 23. Install snap and certbot
sudo apt install snapd
sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot
certbot --version 

# 24. Run certbot
sudo certbot certonly --nginx

# 25. Copy default to /etc/nginx/sites-enabled/default

